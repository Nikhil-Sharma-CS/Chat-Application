package org.example.Chat.Application.config;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Assertions.assertTrue;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.MappingJsonFactory;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.ConstructorDetector;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DatatypeFeatures;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy;
import com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy;
import com.fasterxml.jackson.databind.introspect.VisibilityChecker;
import com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.ser.Serializers;
import com.fasterxml.jackson.databind.ser.impl.FailingSerializer;
import com.fasterxml.jackson.databind.ser.std.NullSerializer;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.ArrayIterator;
import com.fasterxml.jackson.databind.util.StdDateFormat;

import java.util.List;
import java.util.Locale;
import java.util.Set;

import org.junit.jupiter.api.Test;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.http.converter.support.AllEncompassingFormHttpMessageConverter;
import org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter;
import org.springframework.web.client.DefaultResponseErrorHandler;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.DefaultUriBuilderFactory;
import org.springframework.web.util.UriTemplateHandler;

class AppConfigTest {
    /**
     * Method under test: {@link AppConfig#template()}
     */
    @Test
    void testTemplate() {
        //   Diffblue Cover was unable to create a Spring-specific test for this Spring method.

        // Arrange and Act
        RestTemplate actualTemplateResult = (new AppConfig()).template();

        // Assert
        List<HttpMessageConverter<?>> messageConverters = actualTemplateResult.getMessageConverters();
        assertEquals(6, messageConverters.size());
        HttpMessageConverter<?> getResult = messageConverters.get(5);
        ObjectMapper objectMapper = ((MappingJackson2HttpMessageConverter) getResult).getObjectMapper();
        SerializationConfig serializationConfig = objectMapper.getSerializationConfig();
        PrettyPrinter defaultPrettyPrinter = serializationConfig.getDefaultPrettyPrinter();
        assertTrue(defaultPrettyPrinter instanceof DefaultPrettyPrinter);
        DeserializationConfig deserializationConfig = objectMapper.getDeserializationConfig();
        ContextAttributes attributes = deserializationConfig.getAttributes();
        assertTrue(attributes instanceof ContextAttributes.Impl);
        HttpMessageConverter<?> getResult2 = messageConverters.get(3);
        List<HttpMessageConverter<?>> partConverters = ((AllEncompassingFormHttpMessageConverter) getResult2)
                .getPartConverters();
        assertEquals(5, partConverters.size());
        HttpMessageConverter<?> getResult3 = partConverters.get(4);
        ObjectMapper objectMapper2 = ((MappingJackson2HttpMessageConverter) getResult3).getObjectMapper();
        DeserializationContext deserializationContext = objectMapper2.getDeserializationContext();
        DeserializerFactory factory = deserializationContext.getFactory();
        assertTrue(factory instanceof BeanDeserializerFactory);
        DeserializationContext deserializationContext2 = objectMapper.getDeserializationContext();
        DeserializerFactory factory2 = deserializationContext2.getFactory();
        assertTrue(factory2 instanceof BeanDeserializerFactory);
        assertTrue(deserializationContext instanceof DefaultDeserializationContext.Impl);
        assertTrue(deserializationContext2 instanceof DefaultDeserializationContext.Impl);
        DeserializationConfig deserializationConfig2 = objectMapper2.getDeserializationConfig();
        AnnotationIntrospector annotationIntrospector = deserializationConfig2.getAnnotationIntrospector();
        assertTrue(annotationIntrospector instanceof AnnotationIntrospectorPair);
        AnnotationIntrospector annotationIntrospector2 = deserializationConfig.getAnnotationIntrospector();
        assertTrue(annotationIntrospector2 instanceof AnnotationIntrospectorPair);
        ClassIntrospector classIntrospector = deserializationConfig2.getClassIntrospector();
        assertTrue(classIntrospector instanceof BasicClassIntrospector);
        ClassIntrospector classIntrospector2 = deserializationConfig.getClassIntrospector();
        assertTrue(classIntrospector2 instanceof BasicClassIntrospector);
        AccessorNamingStrategy.Provider accessorNaming = serializationConfig.getAccessorNaming();
        assertTrue(accessorNaming instanceof DefaultAccessorNamingStrategy.Provider);
        PolymorphicTypeValidator polymorphicTypeValidator = objectMapper.getPolymorphicTypeValidator();
        assertTrue(polymorphicTypeValidator instanceof LaissezFaireSubTypeValidator);
        SubtypeResolver subtypeResolver = objectMapper2.getSubtypeResolver();
        assertTrue(subtypeResolver instanceof StdSubtypeResolver);
        SubtypeResolver subtypeResolver2 = objectMapper.getSubtypeResolver();
        assertTrue(subtypeResolver2 instanceof StdSubtypeResolver);
        SerializerFactory serializerFactory = objectMapper2.getSerializerFactory();
        assertTrue(serializerFactory instanceof BeanSerializerFactory);
        SerializerFactory serializerFactory2 = objectMapper.getSerializerFactory();
        assertTrue(serializerFactory2 instanceof BeanSerializerFactory);
        SerializerProvider serializerProvider = objectMapper2.getSerializerProvider();
        assertTrue(serializerProvider instanceof DefaultSerializerProvider.Impl);
        SerializerProvider serializerProvider2 = objectMapper.getSerializerProvider();
        assertTrue(serializerProvider2 instanceof DefaultSerializerProvider.Impl);
        SerializerProvider serializerProviderInstance = objectMapper2.getSerializerProviderInstance();
        assertTrue(serializerProviderInstance instanceof DefaultSerializerProvider.Impl);
        SerializerProvider serializerProviderInstance2 = objectMapper.getSerializerProviderInstance();
        assertTrue(serializerProviderInstance2 instanceof DefaultSerializerProvider.Impl);
        JsonSerializer<Object> defaultNullKeySerializer = serializerProvider2.getDefaultNullKeySerializer();
        assertTrue(defaultNullKeySerializer instanceof FailingSerializer);
        JsonSerializer<Object> defaultNullValueSerializer = serializerProvider2.getDefaultNullValueSerializer();
        assertTrue(defaultNullValueSerializer instanceof NullSerializer);
        assertTrue(actualTemplateResult.getErrorHandler() instanceof DefaultResponseErrorHandler);
        UriTemplateHandler uriTemplateHandler = actualTemplateResult.getUriTemplateHandler();
        assertTrue(uriTemplateHandler instanceof DefaultUriBuilderFactory);
        JsonFactory factory3 = objectMapper2.getFactory();
        assertEquals(" ", factory3.getRootValueSeparator());
        JsonFactory factory4 = objectMapper.getFactory();
        assertEquals(" ", factory4.getRootValueSeparator());
        assertNull(deserializationContext.getParser());
        assertNull(deserializationContext2.getParser());
        assertNull(deserializationContext.getConfig());
        assertNull(deserializationContext2.getConfig());
        assertNull(deserializationConfig2.getFullRootName());
        assertNull(deserializationConfig.getFullRootName());
        SerializationConfig serializationConfig2 = objectMapper2.getSerializationConfig();
        assertNull(serializationConfig2.getFullRootName());
        assertNull(serializationConfig.getFullRootName());
        assertNull(objectMapper2.getPropertyNamingStrategy());
        assertNull(objectMapper.getPropertyNamingStrategy());
        assertNull(deserializationConfig2.getPropertyNamingStrategy());
        assertNull(deserializationConfig.getPropertyNamingStrategy());
        assertNull(serializationConfig2.getPropertyNamingStrategy());
        assertNull(serializationConfig.getPropertyNamingStrategy());
        assertNull(serializerProvider.getConfig());
        assertNull(serializerProvider2.getConfig());
        assertNull(deserializationConfig2.getHandlerInstantiator());
        assertNull(deserializationConfig.getHandlerInstantiator());
        assertNull(serializationConfig2.getHandlerInstantiator());
        assertNull(serializationConfig.getHandlerInstantiator());
        assertNull(serializationConfig2.getFilterProvider());
        assertNull(serializationConfig.getFilterProvider());
        assertNull(deserializationConfig2.getProblemHandlers());
        assertNull(deserializationConfig.getProblemHandlers());
        assertNull(deserializationConfig2.getDefaultMergeable());
        assertNull(deserializationConfig.getDefaultMergeable());
        assertNull(serializationConfig2.getDefaultMergeable());
        assertNull(serializationConfig.getDefaultMergeable());
        assertNull(deserializationContext.getActiveView());
        assertNull(deserializationContext2.getActiveView());
        assertNull(serializerProvider.getActiveView());
        assertNull(serializerProvider2.getActiveView());
        assertNull(deserializationConfig2.getActiveView());
        assertNull(deserializationConfig.getActiveView());
        assertNull(serializationConfig2.getActiveView());
        assertNull(serializationConfig.getActiveView());
        TypeFactory typeFactory = objectMapper2.getTypeFactory();
        assertNull(typeFactory.getClassLoader());
        TypeFactory typeFactory2 = objectMapper.getTypeFactory();
        assertNull(typeFactory2.getClassLoader());
        assertEquals(0, deserializationContext.getDeserializationFeatures());
        assertEquals(0, deserializationContext2.getDeserializationFeatures());
        assertEquals(1, actualTemplateResult.getInterceptors().size());
        assertEquals(1, messageConverters.get(2).getSupportedMediaTypes().size());
        assertEquals(2, partConverters.get(0).getSupportedMediaTypes().size());
        assertEquals(2, partConverters.get(1).getSupportedMediaTypes().size());
        assertEquals(2, getResult3.getSupportedMediaTypes().size());
        assertEquals(2, messageConverters.get(0).getSupportedMediaTypes().size());
        assertEquals(2, messageConverters.get(1).getSupportedMediaTypes().size());
        assertEquals(2, getResult.getSupportedMediaTypes().size());
        assertEquals(2079, factory3.getGeneratorFeatures());
        assertEquals(2079, factory4.getGeneratorFeatures());
        assertEquals(21771068, serializationConfig2.getSerializationFeatures());
        assertEquals(21771068, serializationConfig.getSerializationFeatures());
        assertEquals(237020288, deserializationConfig2.getDeserializationFeatures());
        assertEquals(237020288, deserializationConfig.getDeserializationFeatures());
        HttpMessageConverter<?> getResult4 = partConverters.get(3);
        assertEquals(3, getResult4.getSupportedMediaTypes().size());
        HttpMessageConverter<?> getResult5 = messageConverters.get(4);
        assertEquals(3, getResult5.getSupportedMediaTypes().size());
        Set<Object> registeredModuleIds = objectMapper.getRegisteredModuleIds();
        assertEquals(3, registeredModuleIds.size());
        assertEquals(4, getResult2.getSupportedMediaTypes().size());
        assertEquals(65537, factory3.getParserFeatures());
        assertEquals(65537, factory4.getParserFeatures());
        assertEquals(JsonInclude.Include.ALWAYS, serializationConfig2.getSerializationInclusion());
        assertEquals(JsonInclude.Include.ALWAYS, serializationConfig.getSerializationInclusion());
        assertEquals(DefaultUriBuilderFactory.EncodingMode.URI_COMPONENT,
                ((DefaultUriBuilderFactory) uriTemplateHandler).getEncodingMode());
        DeserializerFactoryConfig factoryConfig = ((BeanDeserializerFactory) factory).getFactoryConfig();
        assertFalse(factoryConfig.hasAbstractTypeResolvers());
        DeserializerFactoryConfig factoryConfig2 = ((BeanDeserializerFactory) factory2).getFactoryConfig();
        assertFalse(factoryConfig2.hasAbstractTypeResolvers());
        assertFalse(factoryConfig.hasDeserializerModifiers());
        assertFalse(factoryConfig2.hasDeserializerModifiers());
        assertFalse(deserializationConfig2.hasExplicitTimeZone());
        assertFalse(deserializationConfig.hasExplicitTimeZone());
        assertFalse(serializationConfig2.hasExplicitTimeZone());
        assertFalse(serializationConfig.hasExplicitTimeZone());
        SerializerFactoryConfig factoryConfig3 = ((BeanSerializerFactory) serializerFactory).getFactoryConfig();
        assertFalse(factoryConfig3.hasSerializerModifiers());
        SerializerFactoryConfig factoryConfig4 = ((BeanSerializerFactory) serializerFactory2).getFactoryConfig();
        assertFalse(factoryConfig4.hasSerializerModifiers());
        assertFalse(((Jaxb2RootElementHttpMessageConverter) getResult4).isProcessExternalEntities());
        assertFalse(((Jaxb2RootElementHttpMessageConverter) getResult5).isProcessExternalEntities());
        assertFalse(((Jaxb2RootElementHttpMessageConverter) getResult4).isSupportDtd());
        assertFalse(((Jaxb2RootElementHttpMessageConverter) getResult5).isSupportDtd());
        assertFalse(((DefaultUriBuilderFactory) uriTemplateHandler).hasBaseUri());
        assertTrue(factoryConfig.hasDeserializers());
        assertTrue(factoryConfig2.hasDeserializers());
        assertTrue(factoryConfig.hasKeyDeserializers());
        assertTrue(factoryConfig2.hasKeyDeserializers());
        assertTrue(factoryConfig.hasValueInstantiators());
        assertTrue(factoryConfig2.hasValueInstantiators());
        assertTrue(deserializationConfig2.isAnnotationProcessingEnabled());
        assertTrue(deserializationConfig.isAnnotationProcessingEnabled());
        assertTrue(serializationConfig2.isAnnotationProcessingEnabled());
        assertTrue(serializationConfig.isAnnotationProcessingEnabled());
        assertTrue(factoryConfig3.hasKeySerializers());
        assertTrue(factoryConfig4.hasKeySerializers());
        assertTrue(factoryConfig3.hasSerializers());
        assertTrue(factoryConfig4.hasSerializers());
        assertTrue(((ArrayIterator<Deserializers>) factoryConfig2.deserializers()).hasNext());
        assertTrue(((ArrayIterator<Serializers>) factoryConfig3.serializers()).hasNext());
        assertTrue(((ArrayIterator<Serializers>) factoryConfig4.serializers()).hasNext());
        assertTrue(actualTemplateResult.getClientHttpRequestInitializers().isEmpty());
        assertEquals(registeredModuleIds, objectMapper2.getRegisteredModuleIds());
        Version versionResult = annotationIntrospector2.version();
        assertSame(versionResult, annotationIntrospector.version());
        AnnotationIntrospector annotationIntrospector3 = serializationConfig2.getAnnotationIntrospector();
        assertSame(versionResult, annotationIntrospector3.version());
        AnnotationIntrospector annotationIntrospector4 = serializationConfig.getAnnotationIntrospector();
        assertSame(versionResult, annotationIntrospector4.version());
        ConstructorDetector expectedConstructorDetector = deserializationConfig.getConstructorDetector();
        assertSame(expectedConstructorDetector, deserializationConfig2.getConstructorDetector());
        JsonNodeFactory nodeFactory = objectMapper.getNodeFactory();
        assertSame(nodeFactory, deserializationConfig2.getNodeFactory());
        assertSame(nodeFactory, deserializationConfig.getNodeFactory());
        assertSame(nodeFactory, objectMapper2.getNodeFactory());
        assertSame(typeFactory, deserializationConfig2.getTypeFactory());
        assertSame(typeFactory, serializationConfig2.getTypeFactory());
        assertSame(typeFactory2, deserializationConfig.getTypeFactory());
        assertSame(typeFactory2, serializationConfig.getTypeFactory());
        Base64Variant base64Variant = deserializationConfig.getBase64Variant();
        assertSame(base64Variant, deserializationConfig2.getBase64Variant());
        assertSame(base64Variant, serializationConfig2.getBase64Variant());
        assertSame(base64Variant, serializationConfig.getBase64Variant());
        Locale locale = deserializationConfig.getLocale();
        assertSame(locale, deserializationConfig2.getLocale());
        assertSame(locale, serializationConfig2.getLocale());
        assertSame(locale, serializationConfig.getLocale());
        DatatypeFeatures datatypeFeatures = deserializationConfig.getDatatypeFeatures();
        assertSame(datatypeFeatures, deserializationConfig2.getDatatypeFeatures());
        assertSame(datatypeFeatures, serializationConfig2.getDatatypeFeatures());
        assertSame(datatypeFeatures, serializationConfig.getDatatypeFeatures());
        JsonSetter.Value defaultSetterInfo = deserializationConfig.getDefaultSetterInfo();
        assertSame(defaultSetterInfo, deserializationConfig2.getDefaultSetterInfo());
        assertSame(defaultSetterInfo, serializationConfig.getDefaultSetterInfo());
        assertSame(objectMapper2, factory3.getCodec());
        assertSame(objectMapper, factory4.getCodec());
        assertSame(defaultPrettyPrinter, serializationConfig2.getDefaultPrettyPrinter());
        assertSame(factory3, objectMapper2.getJsonFactory());
        assertSame(factory4, objectMapper.getJsonFactory());
        assertSame(attributes, deserializationConfig2.getAttributes());
        assertSame(attributes, serializationConfig2.getAttributes());
        assertSame(attributes, serializationConfig.getAttributes());
        assertSame(annotationIntrospector3, serializerProviderInstance.getAnnotationIntrospector());
        assertSame(annotationIntrospector4, serializerProviderInstance2.getAnnotationIntrospector());
        assertSame(classIntrospector, serializationConfig2.getClassIntrospector());
        assertSame(classIntrospector2, serializationConfig.getClassIntrospector());
        assertSame(accessorNaming, deserializationConfig2.getAccessorNaming());
        assertSame(accessorNaming, deserializationConfig.getAccessorNaming());
        assertSame(accessorNaming, serializationConfig2.getAccessorNaming());
        assertSame(objectMapper.getVisibilityChecker(), deserializationConfig2.getDefaultVisibilityChecker());
        assertSame(objectMapper.getVisibilityChecker(), deserializationConfig.getDefaultVisibilityChecker());
        assertSame(polymorphicTypeValidator, objectMapper2.getPolymorphicTypeValidator());
        assertSame(polymorphicTypeValidator, deserializationConfig.getPolymorphicTypeValidator());
        assertSame(polymorphicTypeValidator, serializationConfig2.getPolymorphicTypeValidator());
        assertSame(polymorphicTypeValidator, serializationConfig.getPolymorphicTypeValidator());
        assertSame(subtypeResolver, deserializationConfig2.getSubtypeResolver());
        assertSame(subtypeResolver, serializationConfig2.getSubtypeResolver());
        assertSame(subtypeResolver2, deserializationConfig.getSubtypeResolver());
        assertSame(subtypeResolver2, serializationConfig.getSubtypeResolver());
        assertSame(defaultNullKeySerializer, serializerProvider.getDefaultNullKeySerializer());
        assertSame(defaultNullValueSerializer, serializerProvider.getDefaultNullValueSerializer());
        assertSame(objectMapper.getDateFormat(), deserializationConfig2.getDateFormat());
        assertSame(objectMapper.getDateFormat(), deserializationConfig.getDateFormat());
        assertSame(objectMapper.getDateFormat(), serializationConfig2.getDateFormat());
        assertSame(objectMapper.getDateFormat(), serializationConfig.getDateFormat());
    }
}
